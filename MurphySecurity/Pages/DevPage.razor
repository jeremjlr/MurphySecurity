@page "/devpage"
@{
    // MurphySecurity is a simple home security system designed to be used with Raspberry pi
    // Copyright (C) 2021 Jérémy LEPROU jerem.jlr@gmail.com
    //
    // This program is free software: you can redistribute it and/or modify
    // it under the terms of the GNU Affero General Public License as published
    // by the Free Software Foundation, either version 3 of the License, or
    // (at your option) any later version.
    //
    // This program is distributed in the hope that it will be useful,
    // but WITHOUT ANY WARRANTY, without even the implied warranty of
    // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    // GNU Affero General Public License for more details.
    //
    // You should have received a copy of the GNU Affero General Public License
    // along with this program.  If not, see <https://www.gnu.org/licenses/>.
}
@implements IDisposable
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using System.Net.NetworkInformation;
@using System.Net;
@using System.Net.Sockets;
@using System.Threading;
@using System.IO;
@using System.Threading.Tasks;

@using MurphySecurity.Alerts;
@using MurphySecurity.Cameras;
@using MurphySecurity.Emails;

<h1>This is for testing</h1>

<button class="btn btn-primary" @onclick="FindIP">Find IP</button>

@{string messageToSend = "A level 5 alert has been detected";}
<button class="btn btn-primary" @onclick="()=>SendEmail(messageToSend)">Send Email</button>

<button class="btn btn-primary" @onclick="AlertManager.SOSAlert.LaunchAlert">ALERT</button>
<button class="btn btn-primary" @onclick="OnDirectoryClick">Directory</button>

@foreach (Camera cam in _cameras)
{
    <div>
        <p>@cam.Settings.Id</p>
        <img src=@cam.ImageSrc />
    </div>
}

@code {
    private bool _disposed = false;
    private static bool _isStarted = false;
    private List<Camera> _cameras = new List<Camera>();

    protected override void OnAfterRender(bool firstRender)
    {
        _cameras.Clear();
        string[] cameraIpArray = Camera.GetAllCamerasIP();
        for (int i = 0; i < cameraIpArray.Length; i++)
        {
            Camera camera;
            if (Camera.TryGetCamera(cameraIpArray[i], out camera))
            {
                _cameras.Add(camera);
            }
        }
        Thread.Sleep(5);
        this.InvokeAsync(UpdatePage);
    }

    protected async override Task OnInitializedAsync()
    {
        ValueTask<string> toWaitString = localStorage.GetItemAsync<string>("name");
        string name = await toWaitString;
        Console.WriteLine("COCOCOCOCO : " + name);
    }

    private void OnDirectoryClick()
    {
        DateTime time = DateTime.Now;
        DirectoryInfo dInfo = Directory.CreateDirectory(AlertManager.ALERTS_PATH + "/" + "AlertOnCore(" + time.Year + "-" + time.Month + "-" + time.Day + "_" + time.Hour + "-" + time.Minute + "-" + time.Second + ")");
        Console.WriteLine("DNAME :" + dInfo.Name);
        Console.WriteLine("DFULLPATH :" + dInfo.FullName);
    }

    private void FindIP()
    {
        String address = "";
        WebRequest request = WebRequest.Create("http://checkip.dyndns.org/");
        using (WebResponse response = request.GetResponse())
        using (StreamReader stream = new StreamReader(response.GetResponseStream()))
        {
            address = stream.ReadToEnd();
        }
        Console.WriteLine(address);
        int first = address.IndexOf("Address: ") + 9;
        int last = address.LastIndexOf("</body>");
        address = address.Substring(first, last - first);

        Console.WriteLine(address);
    }

    /*private void RemoveAllCamera()
    {
        string[] cameraIpArray = Camera.GetAllCamerasIP();
        for (int i = 0; i < cameraIpArray.Length; i++)
        {
            Camera camera;
            if (Camera.TryGetCamera(cameraIpArray[i], out camera))
            {
                camera.Close(cameraIpArray[i]);
            }
        }
    }*/

    private void SendEmail(string messageBody)
    {
        EmailsSender.SendEmailAlert("TESTETSTETST FROM MURPHY SECURITY ! " + DateTime.Now, messageBody);
    }

    private void PingCompleted(object sender, PingCompletedEventArgs e)
    {
        if (e.Reply != null && e.Reply.Status == IPStatus.Success)
        {
            Console.WriteLine(e.UserState);
            this.InvokeAsync(UpdatePage);
        }
    }

    private IPAddress GetLocalIp()
    {
        using (Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, 0))
        {
            socket.Connect("8.8.8.8", 65530);
            IPEndPoint endPoint = socket.LocalEndPoint as IPEndPoint;
            //IPAddress localIP = endPoint.Address;
            socket.Close();
            return endPoint.Address;
        }
    }

    /*private static BackgroundWorker udpImageRequester = new BackgroundWorker();
    private static void UdpImageRequest(object sender, DoWorkEventArgs e)
    {
        UdpClient client = new UdpClient("127.0.0.1", 10000);
        client.Client.SendTimeout = 2000;
        while (true)
        {
            try
            {
                // Sends a message to the host to which you have connected.
                Byte[] sendBytes = Encoding.ASCII.GetBytes("Is anybody there?");
                client.Send(sendBytes, sendBytes.Length);

                byte[] imageBytes = File.ReadAllBytes("wwwroot/Images/jeanclaude.jpg");
                string base64 = Convert.ToBase64String(imageBytes);
                imgSrc = String.Format("data:jpeg;base64,{0}", base64);
                Thread.Sleep(2000);
            }
            catch (Exception exception)
            {
                Console.WriteLine("Error in udp client : " + exception.Message);
            }
        }
    }*/

    /*private static BackgroundWorker udpServer = new BackgroundWorker();
    private static void UdpServe(object sender, DoWorkEventArgs e)
    {
        UdpClient client = new UdpClient(10000);
        IPEndPoint RemoteIpEndPoint = new IPEndPoint(IPAddress.Any, 0);
        //client.Client.ReceiveTimeout = 2000;
        while (true)
        {
            try
            {
                byte[] receivedBytes = client.Receive(ref RemoteIpEndPoint);
                string returnData = Encoding.ASCII.GetString(receivedBytes);
                Console.WriteLine(returnData);
            }
            catch (Exception exception)
            {
                Console.WriteLine("Error in udp server : " + exception.Message);
            }
        }
    }*/

    private void UpdatePage()
    {
        this.StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        Console.WriteLine("Disposing AddressBase.");
        _disposed = true;
    }
}
